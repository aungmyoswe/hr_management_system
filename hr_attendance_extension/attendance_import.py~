from openerp.osv import orm
from openerp.osv import fields, osv
import xlrd
import codecs
from xlrd import open_workbook
from openerp.tools.translate import _
from datetime import datetime
import base64
import logging
from passlib.tests.backports import skip
_logger = logging.getLogger(__name__)

#header_fields = ['initial', 'employee name', 'date', 'shift', 'comment', 'presstime 1', 'presstime 2', 'presstime 3', 'presstime 4']
header_fields = ['initial', 'employeename', 'calculateddate', 'shiftcode', 'intime', 'outtime',]
#### Field indexes for related database fields
header_indexes = {}

class attendance(osv.osv):
    _name = 'data_import.attendance'
    _columns = {
              'name':fields.char('Description'),
              'import_date':fields.date('Import Date', readonly=True),
              'import_fname': fields.char('Filename', size=128),
              'import_file':fields.binary('File', required=True),
              'note':fields.text('Log'),
              'company_id': fields.many2one('res.company', 'Company', required=False),
              'state':fields.selection([
                ('draft', 'Draft'),
                ('completed', 'Completed'),
                ('error', 'Error'),
            ], 'States'),
              
              }
    _defaults = {
            'state':'draft',
            'import_date':datetime.today(),
                 }
    
    err_log = ''

    def _check_file_ext(self, cursor, user, ids):
        for import_file in self.browse(cursor, user, ids):
            if '.xls' in import_file.import_fname:return True
            else: return False
        return True
    
    _constraints = [(_check_file_ext, "Please import EXCEL file!", ['import_fname'])]
    
    # ## Load excel data file
    def get_excel_datas(self, sheets):
        result = []
        for s in sheets:
            # # header row
            headers = []
            header_row = 0
            for hcol in range(0, s.ncols):
                headers.append(s.cell(header_row, hcol).value)
                            
            result.append(headers)
            
            # # value rows
            for row in range(header_row + 1, s.nrows):
                values = []
                for col in range(0, s.ncols):
                    values.append(s.cell(row, col).value)
                result.append(values)
        return result
    
    # ## Check excel row headers with header_fields and define header indexes for database fields
    def get_headers(self, line):
        if line[0].strip().lower() not in header_fields:
                    raise orm.except_orm(_('Error :'), _("Error while processing the header line %s.\
                     \n\nPlease check your Excel separator as well as the column header fields") % line)
        else:
            # ## set header_fields to header_index with value -1
            for header in header_fields:
                header_indexes[header] = -1  
                     
            col_count = 0
            for ind in range(len(line)):
                if line[ind] == '':
                    col_count = ind
                    break
                elif ind == len(line) - 1:
                    col_count = ind + 1
                    break
            
            for i in range(col_count):                
                header = line[i].strip().lower()
                if header not in header_fields:
                    self.err_log += '\n' + _("Invalid Excel File, Header Field '%s' is not supported !") % header
                else:
                    header_indexes[header] = i
                                
            for header in header_fields:
                if header_indexes[header] < 0:                    
                    self.err_log += '\n' + _("Invalid Excel file, Header '%s' is missing !") % header
    
    #### Fill excel row data into list to import to database
    def get_line_data(self, line):
        result = {}
        for header in header_fields:                        
            result[header] = line[header_indexes[header]]
    
    #### validate date values        
    def check_date_value(self, date_value, message):
        result_date = None
        try:
            data_time = float(date_value)
            result = xlrd.xldate.xldate_as_tuple(data_time, 0)
            a = str(result[0]) + '/' + str(result[1]) + '/' + str(result[2]) + ' ' + str(result[3]) + ':' + str(result[4]) + ':' + str(result[5])
    
            result_date = datetime.strptime(a, '%Y/%m/%d %H:%M:%S').date()
        except Exception, e:
            try:
                str_date = str(date_value) + ' 00:00:00'
                result_date = datetime.strptime(str_date, '%d-%m-%Y %H:%M:%S').date()
            except Exception, e:
                try:
                    str_date = str(date_value) + ' 00:00:00'
                    result_date = datetime.strptime(str_date, '%Y/%m/%d %H:%M:%S').date()
                except Exception, e:
                    try:
                        str_date = str(date_value) + ' 00:00:00'
                        result_date = datetime.strptime(str_date, '%m/%d/%Y %H:%M:%S').date()
                    except Exception, e:
                        try:
                            data_time = str(date_value).split('-')
                            a = data_time[2] + '/' + data_time[1] + '/' + data_time[0] + ' 00:00:00'
                            result_date = datetime.strptime(a, '%Y/%m/%d %H:%M:%S').date()
                        except Exception, e:
                            return None                       
        return result_date
    
    ######### Read data and import to database ##########        
    def import_data(self, cr, uid, ids, context=None):
        hr_employee_obj = self.pool.get('hr.employee')
        hr_attendance_obj = self.pool.get('hr.esi.attendance')
        
        data = self.browse(cr, uid, ids)[0]
        company_id = data.company_id.id
        import_file = data.import_file                
        
        header_line = True
        lines = base64.decodestring(import_file)
        wb = open_workbook(file_contents=lines)
        excel_rows = self.get_excel_datas(wb.sheets())        
        value = {}
        all_data = []
        created_counnt = 0
        updated_count = 0
        skipped_count = 0
        
        for line in excel_rows:
            if not line or line and line[0] and line[0] in ['', '#']:
                continue
            
            if header_line:
                self.get_headers(line)
                header_line = False                           
            elif line and line[0] and line[0] not in ['#', '']:
                import_vals = {}
                # ## Fill excel row data into list to import to database
                for header in header_fields:                        
                    import_vals[header] = line[header_indexes[header]]
                
                all_data.append(import_vals)
       
        if self.err_log <> '':
            self.write(cr, uid, ids[0], {'note': ''})
            self.write(cr, uid, ids[0], {'note': self.err_log})
            self.write(cr, uid, ids[0], {'state': 'error'})
        else:
            for data in all_data:
                employee_id = None                  
                ##### to hold value for database
                value = {}
                fingerprint = str(data['initial']).strip().encode('utf-8')
                submit_date = data['calculateddate']
                #reason = data['comment']
                sub_time1 = data['intime'].strip()
                sub_time2 = data['outtime'].strip()
                #sub_time1 = data['presstime 1'].strip()
                #sub_time2 = data['presstime 2'].strip()
                #sub_time3 = data['presstime 3'].strip()
                #sub_time4 = data['presstime 4'].strip()
                
                submit_date = self.check_date_value(submit_date, 'Date')
                print submit_date
                
                if not fingerprint:
                    skipped_count = skipped_count + 1
                    continue
                if not submit_date:
                    skipped_count = skipped_count + 1
                    continue
                employee_ids = hr_employee_obj.search(cr, uid, [('otherid','=',fingerprint)])
                if not employee_ids:
                    skipped_count = skipped_count + 1
                    continue
                else:
                    employee_id = employee_ids[0]

                value['fingerprint_id'] = fingerprint
                value['employee'] = employee_id
                value['name'] = submit_date
                #value['reason'] = reason

                submit_time = 0.0
                c_count = 0
                if len(sub_time1) > 0:
                    sub_time = sub_time1.split(' ')
                    hm_time = sub_time[0]
                    ap = sub_time[1]
                    s_hour = hm_time.split(':')[0]
                    s_min = hm_time.split(':')[1]
                    submit_time = float(s_hour)
                    submit_time = round(submit_time + float((float(s_min)/60)),2)
                    if ap == 'PM' and submit_time < 12:
                        submit_time = submit_time + 12
                    value['submit_time'] = submit_time
                    value['action'] = 'sign_in'
                    hr_attendance_obj.create(cr, uid, value, context = context)
                    c_count += 1
                submit_time = 0.0
                if len(sub_time2) > 0:
                    sub_time = sub_time2.split(' ')
                    hm_time = sub_time[0]
                    ap = sub_time[1]
                    s_hour = hm_time.split(':')[0]
                    s_min = hm_time.split(':')[1]
                    submit_time = float(s_hour)
                    submit_time = round(submit_time + float((float(s_min)/60)),2)
                    if ap == 'PM' and submit_time < 12:
                        submit_time = submit_time + 12
                    value['submit_time'] = submit_time
                    value['action'] = 'sign_out'
                    hr_attendance_obj.create(cr, uid, value, context = context)
                    c_count += 1
                submit_time = 0.0
#                 if len(sub_time3) > 0:
#                     sub_time = sub_time3.split(' ')
#                     hm_time = sub_time[0]
#                     ap = sub_time[1]
#                     s_hour = hm_time.split(':')[0]
#                     s_min = hm_time.split(':')[1]
#                     submit_time = float(s_hour)
#                     submit_time = round(submit_time + float((float(s_min)/60)),2)
#                     if ap == 'PM' and submit_time < 12:
#                         submit_time = submit_time + 12
#                     value['submit_time'] = submit_time
#                     value['action'] = 'sign_in'
#                     hr_attendance_obj.create(cr, uid, value, context = context)
#                     c_count += 1
#                 submit_time = 0.0
#                 if len(sub_time4) > 0:
#                     sub_time = sub_time4.split(' ')
#                     hm_time = sub_time[0]
#                     ap = sub_time[1]
#                     s_hour = hm_time.split(':')[0]
#                     s_min = hm_time.split(':')[1]
#                     submit_time = float(s_hour)
#                     submit_time = round(submit_time + float((float(s_min)/60)),2)
#                     if ap == 'PM' and submit_time < 12:
#                         submit_time = submit_time + 12
#                     value['submit_time'] = submit_time
#                     value['action'] = 'sign_out'
#                     hr_attendance_obj.create(cr, uid, value, context = context)
#                     c_count += 1

                created_counnt = created_counnt + c_count
                percent = ((created_counnt + updated_count)*100)/len(all_data)                
                print '(' + str(percent) + '%)' + str(updated_count + created_counnt) + ' records of total ' + str(len(all_data)) + ' completed'
            
            message = 'Import Success at ' + str(datetime.strptime(datetime.today().strftime('%Y-%m-%d %H:%M:%S'),
                      '%Y-%m-%d %H:%M:%S'))+ '\n' + str(len(all_data))+' records imported' +'\
                      \n' + str(created_counnt) + ' created\n' + str(updated_count) + ' updated' + '\
                      \n' + str(skipped_count) + ' skipped'
                      
            self.write(cr, uid, ids[0], {'state': 'completed','note': message})            

# Under class is for hr_contract
